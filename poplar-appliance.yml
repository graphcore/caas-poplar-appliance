# Modified and renamed by Graphcore Ltd.
---
- name: Gather some information on user & project
  hosts: openstack
  tasks:
    - name: Log appliance name
      ansible.builtin.debug:
        msg: "Building appliance {{cluster_name}}"

    - name: Get openstack user name
      ansible.builtin.shell:
        cmd: openstack user show "$(openstack token issue -f value -c user_id)" -f value -c name
      register: openstack_cli_user

    - name: Set user name
      ansible.builtin.set_fact:
        appliance_user: "{{ (openstack_cli_user.stdout | split('@') | first) if '@' in openstack_cli_user.stdout else openstack_cli_user.stdout }}"

    - name: Get user's openstack project ID
      ansible.builtin.shell:
        cmd: openstack token issue -f value -c project_id
      register: openstack_cli_proj

    - name: Set user project ID fact
      ansible.builtin.set_fact:
        appliance_project: "{{ openstack_cli_proj.stdout | default( 'ipuops') }}"

    - name: Get tenancy name
      ansible.builtin.shell:
        cmd: openstack project show "$(openstack token issue -f value -c project_id)" -f value -c name
      register: openstack_cli_tenancy_name

    - name: Set user tenancy name fact
      ansible.builtin.set_fact:
        appliance_tenancy: "{{ openstack_cli_tenancy_name.stdout | default( 'ipuops') }}"

    - name: Set allocation name
      ansible.builtin.set_fact:
        allocation_name: "{{appliance_user}}-{{cluster_name}}"

    - name: Generate partition name
      ansible.builtin.set_fact:
        user_partition: "{{ ('Single reconfigurable partition' in partition_choice) | ternary(allocation_name ~ '-reconfig', 'N/A')  }}"

    - name: Define the terraform state
      ansible.builtin.set_fact:
        terraform_state: "{{ cluster_state | default('present') }}"

    - name: Include the vars we need
      ansible.builtin.include_vars:
        file: "{{ item }}"
      loop:
        - "{{playbook_dir}}/group_vars/{{gc_cloud}}.yaml"
        - "{{playbook_dir}}/group_vars/ipums.yaml"

- name: Create or destroy appliance
  hosts: openstack
  vars:
    image_name: "{{ poplar_appliance_images | selectattr('name', 'equalto', operating_system) | map(attribute='image_name') | first }}"
    image_tag: "{{ poplar_appliance_images | selectattr('name', 'equalto', operating_system) | map(attribute='image_tag') | first }}"
    execution_order:
      - "{{ (terraform_state == 'present') | ternary('poplar_infra','') }}"
      - "{{ (terraform_state == 'present' or terraform_state == 'absent') | ternary('cluster_infra','') }}"
      - "{{ (terraform_state == 'absent' ) | ternary('poplar_infra','') }}"
  tasks:
    - name: Include the roles needed
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop: "{{ execution_order | select | list }}"

# Write the outputs as the final task
- hosts: localhost
  tasks:
    - debug: var=outputs
      vars:
        outputs:
          cluster_access_ip: "{{ hostvars[groups['openstack'][0]].cluster_access_ip }}"
          cluster_user: "{{ hostvars[groups['openstack'][0]].appliance_user }}"
          cluster_flavour_name: "{{ hostvars[groups['openstack'][0]].cluster_flavour_name }}"
          cluster_operating_system: "{{ hostvars[groups['openstack'][0]].operating_system }}"
          allocation_name: "{{ hostvars[groups['openstack'][0]].allocation_name }}"
          allocation_size: "{{ hostvars[groups['openstack'][0]].allocation_size }}"
          ipuof_vipu_api_partition_id: "{{ hostvars[groups['openstack'][0]].user_partition | default('none') }}"
          ipuof_vipu_api_host: "{{ hostvars[groups['openstack'][0]].vipu_servers['default' if '@' in appliance_tenancy else appliance_tenancy]['ctrl_net_ip'] }}"
