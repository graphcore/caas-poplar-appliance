#####
##### The identity scope we are operating in
##### Used to add tge OpenStack user name to instance metadata
#####
data "openstack_identity_auth_scope_v3" "scope" {
  name = "{{ cluster_name }}"
}

#####
##### Security groups
#####

# Security group to hold rules for the node
resource "openstack_networking_secgroup_v2" "cluster_secgroup" {
  name                 = "{{ cluster_name }}-{{ cluster_type }}"
  delete_default_rules = true   # Fully manage with terraform
}

# Allow all egress
resource "openstack_networking_secgroup_rule_v2" "cluster_egress_v4" {
  direction         = "egress"
  ethertype         = "IPv4"
  security_group_id = "${openstack_networking_secgroup_v2.cluster_secgroup.id}"
}

{% if cluster_user_ssh_public_key is defined and cluster_user_ssh_public_key %}
# Allow ingress for SSH
resource "openstack_networking_secgroup_rule_v2" "cluster_ingress_ssh_v4" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 22
  port_range_max    = 22
  security_group_id = "${openstack_networking_secgroup_v2.cluster_secgroup.id}"
}
{% endif %}

#####
##### Cluster volumes
#####

resource "openstack_blockstorage_volume_v3" "zenith_volume" {
  name = "{{ cluster_name }}-{{ cluster_type }}-zenith"
  size = 1
}

resource "openstack_blockstorage_volume_v3" "data_volume" {
  name = "{{ cluster_name }}-{{ cluster_type }}-data"
  size = "{{ cluster_volume_size }}"
}

#####
##### Cluster networks
#####

# When we are destroying these resources, we need to get:
# - user_rnic_net_id
# - user_rnic_subnet_id
# Which are usually supplied by the frontend TF

{% if terraform_state == 'absent' %}
data "openstack_networking_network_v2" "userrnicnet" {
  tags = [ "user-rnic", "{{cluster_name}}", "{{cluster_id}}", "{{appliance_user}}" ]
}

data "openstack_networking_subnet_v2" "userrnicsub" {
  tags = [ "user-rnic", "{{cluster_name}}", "{{cluster_id}}", "{{appliance_user}}" ]
}
{% endif %}

resource "openstack_networking_port_v2" "rnic" {
  name      = "{{ cluster_name }}-{{ cluster_type }}-rnic"
{% if terraform_state == 'absent' %}
  network_id     = "${data.openstack_networking_network_v2.userrnicnet.id}"
{% else %}
  network_id     = "{{ user_rnic_net_id }}"
{% endif %}
  admin_state_up = "true"
  binding {
    vnic_type = "direct"
  }
  fixed_ip {
{% if terraform_state == 'absent' %}
    subnet_id = "${data.openstack_networking_subnet_v2.userrnicsub.id}"
{% else %}
    subnet_id = "{{ user_rnic_subnet_id }}"
{% endif %}
  }
  port_security_enabled = "false"
  # don't overrite os-vif adding chosen PCI device
  lifecycle {
    ignore_changes = [
      binding,
    ]
  }
}

# This block brings up a second NIC in the appliance
data "openstack_networking_network_v2" "ctrlnet" {
  tags = [ "ctrl", "azimuth-vpod-common-ctrl" ]
}

data "openstack_networking_subnet_v2" "ctrlsub" {
  tags = [ "ctrl", "azimuth-vpod-common-ctrl" ]
}

resource "openstack_networking_port_v2" "ctrl" {
  name      = "{{ cluster_name }}-{{ cluster_type }}-ctrl"
  network_id     = data.openstack_networking_network_v2.ctrlnet.id
  admin_state_up = "true"
  fixed_ip {
    subnet_id = data.openstack_networking_subnet_v2.ctrlsub.id
  }
  port_security_enabled = "true"
  security_group_ids = [ openstack_networking_secgroup_v2.cluster_secgroup.id ]
}

resource "openstack_networking_floatingip_v2" "app-fip" {
  pool = "external"
  port_id = "${openstack_networking_port_v2.ctrl.id}"
}

#####
##### Cluster nodes
#####

##
# Select image based on name and tag
data "openstack_images_image_v2" "image" {
  name = "{{ image_name }}"
  tag =  "{{ image_tag }}"
}

resource "openstack_compute_instance_v2" "cluster_server" {
  name      = "{{ cluster_name }}"

  flavor_id = "{{ cluster_flavor }}"

{% if cluster_user_ssh_public_key is defined and cluster_user_ssh_public_key %}
  user_data = <<-EOF
    #cloud-config
    users:
      - name: "${data.openstack_identity_auth_scope_v3.scope.user_name}"
        groups: ipupod,docker
        gecos: "${data.openstack_identity_auth_scope_v3.scope.user_name} ${data.openstack_identity_auth_scope_v3.scope.user_id} ${data.openstack_identity_auth_scope_v3.scope.project_name}"
        sudo: ALL=(ALL) NOPASSWD:ALL
        shell: /bin/bash
        lock_passwd: true
        ssh_authorized_keys:
          - {{ cluster_user_ssh_public_key }}
    mounts:
      - [ ephemeral0, /localdata, auto, "defaults,nofail" ]
    write_files:
      - path: /etc/systemd/network/05-ctrl.network
        content: |
          [Match]
          MACAddress=${openstack_networking_port_v2.ctrl.mac_address}
          [Network]
          DHCP=yes
          [DHCPv4]
          UseDNS=yes
    write_files:
      - path: /etc/systemd/network/06-rnic.network
        content: |
          [Match]
          MACAddress=${openstack_networking_port_v2.rnic.mac_address}
          [Network]
          DHCP=yes
          [DHCPv4]
          UseDNS=false
    runcmd:
      - [ systemctl, restart, systemd-networkd]
  EOF
{% endif %}

  metadata = {
    zenith_volume_id = "${openstack_blockstorage_volume_v3.zenith_volume.id}"
    data_volume_id = "${openstack_blockstorage_volume_v3.data_volume.id}"
    zenith_registrar_url = "{{ zenith_registrar_url }}"
    zenith_registrar_token_webconsole = "{{ zenith_token_webconsole }}"
    zenith_registrar_token_monitoring = "{{ zenith_token_monitoring }}"
    zenith_fqdn_webconsole = "{{ zenith_fqdn_webconsole }}"
    zenith_fqdn_monitoring = "{{ zenith_fqdn_monitoring }}"
    zenith_sshd_host = "{{ zenith_sshd_host }}"
    zenith_sshd_port = "{{ zenith_sshd_port }}"
    azimuth_cloud_name = "notused"
    azimuth_user_name = "${data.openstack_identity_auth_scope_v3.scope.user_name}"
    azimuth_user_id = "${data.openstack_identity_auth_scope_v3.scope.user_id}"
    azimuth_project_name = "${data.openstack_identity_auth_scope_v3.scope.project_name}"
    azimuth_project_id = "${data.openstack_identity_auth_scope_v3.scope.project_id}"
    guacamole_user = "${data.openstack_identity_auth_scope_v3.scope.user_name}"
    appliance_pub_ip = "${openstack_networking_floatingip_v2.app-fip.address}"
    allocation_name = "{{ allocation_name }}"
    allocation_size = "{{ allocation_size }}"
    partition_name  = "{{ user_partition  }}"
    vipu_ipaddr     = "{{ vipu_servers[appliance_tenancy]['ctrl_net_ip'] }}"
    vipu_port       = "{{ vipu_port }}"
  }

  block_device {
{% if cluster_previous_image is defined %}
    uuid  = "{{ cluster_previous_image }}"
{% else %}
    uuid  = "${data.openstack_images_image_v2.image.id}"
{% endif %}
    source_type           = "image"
    volume_size           = 100
    boot_index            = 0
    destination_type      = "volume"
    delete_on_termination = true
  }

  network {
    port = "${openstack_networking_port_v2.rnic.id}"
  }

  network {
    port = "${openstack_networking_port_v2.ctrl.id}"
  }
}

resource "openstack_compute_volume_attach_v2" "zenith_volume" {
  instance_id = "${openstack_compute_instance_v2.cluster_server.id}"
  volume_id   = "${openstack_blockstorage_volume_v3.zenith_volume.id}"
}

resource "openstack_compute_volume_attach_v2" "data_volume" {
  instance_id = "${openstack_compute_instance_v2.cluster_server.id}"
  volume_id   = "${openstack_blockstorage_volume_v3.data_volume.id}"
}
